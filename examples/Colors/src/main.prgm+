#ifndef __pplplus
// The MIT License (MIT)
//
// Copyright (c) 2023-2025 Insoft. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
#endif

#pragma mode( separator(.,;) integer(h64) indentation(2) operators(▶) )

#define HUE G2
#define BLACK_TO_TRANSPARENT_OVERLAY G3
#define TRANSPARENT_TO_WHITE_OVERLAY G4
#define ROUND G1

#define Event key, type[1], x[2], y[3], dx[4], dy[5]
#define Size width[1], height[2]

dict White := #FFFFFF:32h, Silver := #C0C0C0:32h, Gray := #808080:32h, Black := #000000:32h, Red := #FF0000:32h, Magenta := #FF00FF:32h, Cardinal := #D03020:32h, Coral := #F08070:32h, Pink := #FFC0C0:32h, Indigo := #400080:32h, Purple := #800080:32h, Violet := #8000FF:32h, Lavender := #C0C0FF:32h, NavyBlue := #000080:32h, Blue := #0000FF:32h, Denim := #1060C0:32h, Lochmara := #0070C0:32h, SkyBlue := #80D0FF:32h, PacificBlue := #00A0C0:32h, Teal := #008080:32h, Cyan := #00FFFF:32h, Aqua := #00FFFF:32h, FirGreen := #003000:32h, OfficeGreen := #008000:32h, Shamrock := #00A060:32h, Apple := #50B040:32h, LimeGreen := #00FF00:32h, Chocolate := #400808:32h, Brown := #905000:32h, Orange := #FF8000:32h, Olive := #808000:32h, Tangerine := #FFD000:32h, Yellow := #FFFF00:32h, Khaki := #F0E090:32h, Tan := #D0B090:32h, Maroon := #800000:32h, SnowWhite := #FFF0F0:32h, Clear := #FF000000:32h @Color;
    Color.White
dict Percentage = 0, Decimal = 1 UnitType;
dict HSV = 0, HSL = 1 ColorSpace;
dict System := 0, Bin := 1, Oct := 2, Dec := 3, Hex := 4 @Base;
dict MouseDown := 0, MouseMove := 1, MouseUp := 2, MouseClick := 3, MouseStretch := 5, MouseRotate := 6, MouseLongClick := 7 @EventType;
dict Apps := 0, Symb := 1, Up := 2, Help := 3, Esc := 4, Home := 5, Plot := 6, Left := 7, Right := 8, View := 9, Cas := 10, Num := 11, Down := 12, Menu := 13, Vars := 14, Mem := 15, Unit := 16, Xttn := 17, Abc := 18, Bksp := 19, Power := 20, Sin := 21, Cos := 22, Tan := 23, Ln := 24, Log := 25, Sq := 26, Neg := 27, N := 28, Comma := 29, Enter := 30, Eex := 31, 7 := 32, 8 := 33, 9 := 34, Div := 35, Alpha := 36, 4 := 37, 5 := 38, 6 := 39, Mult := 40, Shift := 41, 1 := 42, 2 := 43, 3 := 44, Minus := 45, On := 46, 0 := 47, Dot := 48, Space := 49, Plus := 50 @KeyCode;


regex >`\bauto\b`i v\`__COUNTER__+1`
regex =`^ *\bauto *: *([a-z]\w*)` g\`__COUNTER__+1`:$1
regex `\b([a-zA-Z_]\w*) *\: *([a-zA-Z]\w*(?:::[a-zA-Z]\w*)*)` alias $2:=$1;$1
regex @`\bhp::isKeyPressed *\(([\w.:]+)\)` IFTE(SIZE($1)==1,1,0)
regex @`\bhp::isMouseEvent *\(([\w.:]+)\)` IFTE(SIZE($1)>1,1,0)
regex @`\bhp::screen::clear *\((.*)?\)` RECT($1)
regex @`&{2}` AND
regex @`\b([a-zA-Z_]\w*) *([*\/+-])\= *` $1 := $1 $2
regex @`\(([^?]+)\?(.+):(.+)\)` IFTE($1, $2, $3)

chl: colorsChannel = 0;

cH: colorsH := 0, cS: colorsS := 100, cV: colorsV := 100;
cR: colorsR := 255, cG: colorsG := 0, cB: colorsB := 0;
cUT: colorsUnitType := UnitType.Decimal;
cCS: colorsColorSpace := ColorSpace.HSV;

HEX(d:decimal)
begin
    local h,l;
    h = decimal >> 4;
    l = decimal & 15;
    return CHAR(ifte(h<10,48,55) + h) + CHAR(ifte(l<10,48,55) + l);
end;

DrawTextCentered(s:string, x:atX, y:ofY, fs:fontSize)
begin
    local sz:size;
    dict Size size;
 
    size = TEXTSIZE(string, fontSize);
    TEXTOUT_P(string, G9, atX - size.width / 2, ofY, fontSize, Color.White);
end;

Setup: Colors::Setup()
begin
    local n, auto: data;
    DIMGROB_P(G9, 320, 240, 0);
    
    RECT(Color.Black);
    BLIT_P(G9, __SCREEN);
    
    data = emptylist;
    for n from 0 to 359 step 2 do
        data[n / 2 + 1] = R→B(HSV(n, 100, 100), 64, Base.Hex) + BITSL(R→B(HSV(n + 1, 100, 100), 64, Base.Hex), 32);
    end;
    DIMGROB_P(HUE, 360, 1, data);
    
    data := emptylist;
    for n from 0 to 255 step 2 do
        data[n / 2 + 1] = R→B(RGB(0, 0, 0, 255 - n), 64, Base.Hex) + BITSL(R→B(RGB(0, 0, 0, 255 - (n + 1)), 64, Base.Hex), 32);
    end;
    DIMGROB_P(BLACK_TO_TRANSPARENT_OVERLAY, 1, 256, data);
    
    data := emptylist;
    for n from 0 to 255 step 2 do
        local rgb = {RGB(255, 255, 255, n), RGB(255, 255, 255, n + 1)};
        data[n / 2 + 1] = R→B(RGB(255, 255, 255, n), 64, Base.Hex) + BITSL(R→B(RGB(255, 255, 255, n + 1), 64, Base.Hex), 32);
    end;
    DIMGROB_P(TRANSPARENT_TO_WHITE_OVERLAY, 256, 1, data);
end;

DrawMenu: Colors::DrawMenu()
begin
    /// 0-51, 53-104, (106-157, 159-210), 212-263, 265-319
    RECT_P(G9, 0, 220, 51, 239, #666666:32h);
    RECT_P(G9, 53, 220, 104, 239, #666666:32h);
    RECT_P(G9, 106, 220, 210, 239, #666666:32h);
    RECT_P(G9, 212, 220, 263, 239, #666666:32h);
    RECT_P(G9, 265, 220, 319, 239, #666666:32h);
   
    DrawTextCentered("%",25,225,2);
    DrawTextCentered("d",78,225,2);
    DrawTextCentered("-         HUE         +",158,225,2);
    DrawTextCentered("HSV",237,225,2);
    DrawTextCentered("HSL",290,225,2);
    
    if colorsUnitType == UnitType.Percentage then
        TEXTOUT_P("•", G9, 4, 225, 2, Color.White);
    else
        TEXTOUT_P("•", G9, 57, 225, 2, Color.White);
    end;
    
    if colorsColorSpace == ColorSpace.HSV then
        TEXTOUT_P("•", G9, 216, 225, 2, Color.White);
    else
        TEXTOUT_P("•", G9, 269, 225, 2, Color.White);
    end;
end;

DrawHue: Colors::DrawHue(h)
begin
    BLIT_P(G9, 10, 148, 310, 168, HUE);
    
    X = IP(h / 360 * 300) + 10;
    Y = 148;
    RECT_P(G9, X-3, Y-3, X+2, Y+22, Color.Black, Color.Clear);
    RECT_P(G9, X-2, Y-2, X+2, Y+21, Color.White, Color.Clear);
end;

Colors::DrawSV(h,s,v)
begin
    RECT_P(G9, 10, 10, 137, 137, HSV(h, 100, 100));
    BLIT_P(G9, 10, 10, 138, 138, G4);
    BLIT_P(G9, 10, 10, 138, 138, G3);

    X := s / 100 * 127 + 10;
    Y := (1 - v / 100) * 127 + 10;
    RECT_P(G9, X-3, Y-3, X+2, Y+2, Color.Black, Color.Clear);
    RECT_P(G9, X-2, Y-2, X+1, Y+1, Color.White, Color.Clear);
end;

Update: Colors::Update()
begin
    RECT(G9,#222222:32h);

    Colors::DrawMenu;
    Colors::DrawHue(colorsH);
    Colors::DrawSV(colorsH, colorsS, colorsV);
    
    /// Color Picked
    RECT_P(G9, 154, 10, 309, 42, HSV(colorsH, colorsS, colorsV));
    
    local hsl, rgb, cmyk, hex;
    
    rgb = {colorsR, colorsG, colorsB};
    hsl = HSVtoHSL(colorsH, colorsS, colorsV);
    cmyk = RGBtoCMYK(colorsR, colorsG, colorsB);
    hex = "#" + HEX(colorsR) + HEX(colorsG) + HEX(colorsB);
    
    L0 := TEXTSIZE(hex,7);
    TEXTOUT_P(hex,G9,160-L0(1)/2,180,7,Color.White);
    
    
    local n, ts, info;
    
    /// RGB Info
    info = {"R:","G:","B:"};
    X = 138;
    Y = 51;
    for n = 1 to 3 step 1 do
        ts = TEXTSIZE(info[n],3);
        TEXTOUT_P(info[n],G9,X+15-ts[1],Y+3,3,Color.White);
        RECT_P(G9,X+16,Y,X+55,Y+20,#333333:32h);
        
        if colorsChannel == 1 && n == 1 then
            RECT_P(G9,X+54,Y,X+55,Y+20,RGB(255,0,0));
        end;
        
        if colorsChannel == 2 && n == 2 then
            RECT_P(G9,X+54,Y,X+55,Y+20,RGB(0,255,0));
        end;
        
        if colorsChannel == 3 && n == 3 then
            RECT_P(G9,X+54,Y,X+55,Y+20,RGB(0,0,255));
        end;
        
        if colorsUnitType == UnitType.Decimal then
            TEXTOUT_P(rgb[n],G9,X+22,Y+5,2,Color.White);
        else
            TEXTOUT_P(IP(rgb[n] / 255 * 100)+"%",G9,X+20,Y+5,2,Color.White);
        end;
        Y += 24;
    end;
    
    /// HSV or HSL Info
    if colorsColorSpace == ColorSpace.HSV then info = {"H:","S:","V:"}; end;
    if colorsColorSpace == ColorSpace.HSL then info = {"H:","S:","L:"}; end;
    
    X += 58;
    Y = 51;
    
    for n from 1 to 3 step 1 do
        ts = TEXTSIZE(info[n],3);
        TEXTOUT_P(info[n],G9,X+15-ts[1],Y+3,3,Color.White);
        RECT_P(G9,X+16,Y,X+55,Y+20,#333333:32h);
        case
            if colorsColorSpace == ColorSpace.HSV then
                if n == 1 then
                    TEXTOUT_P(IP(colorsH)+"°",G9,X+20,Y+5,2,Color.White);
                end;
                if n == 2 then
                    TEXTOUT_P(IP(colorsS)+"%",G9,X+20,Y+5,2,Color.White);
                end;
                if n == 3 then
                    TEXTOUT_P(IP(colorsV)+"%",G9,X+20,Y+5,2,Color.White);
                end;
            end;
            if colorsColorSpace == ColorSpace.HSL then
                if n == 1 then
                    TEXTOUT_P(IP(hsl[n])+"°",G9,X+20,Y+5,2,Color.White);
                else
                    TEXTOUT_P(IP(hsl[n])+"%",G9,X+20,Y+5,2,Color.White);
                end;
            end;
        end;
        Y += 24;
    end;
    
    /// CMYK Info
    info = {"C:","M:","Y:","K:"};
    X += 58;
    Y = 51;
    for n from 1 to 4 step 1 do
        ts = TEXTSIZE(info[n],3);
        TEXTOUT_P(info[n],G9,X+15-ts[1],Y+3,3,Color.White);
        RECT_P(G9,X+16,Y,X+55,Y+20,#333333:32h);
        TEXTOUT_P(IP(cmyk[n])+"%",G9,X+20,Y+5,2,Color.White);
        Y += 24;
    end;
    
    BLIT_P(__SCREEN, G9);
end;

UpdateRGB: Colors::UpdateRGB()
begin
    local rgb;
    rgb = HSVtoRGB(colorsH, colorsS, colorsV);
    colorsR = rgb[1];
    colorsG = rgb[2];
    colorsB = rgb[3];
end;

DoMenu: Colors::DoMenu()
begin
    local auto: menu = (Y<220? 0: IP(X / (320/6)+0.025) + 1);
    case
        if menu == 1 then
            colorsUnitType = UnitType.Percentage;
        end;
            
        if menu == 2 then
            colorsUnitType = UnitType.Decimal;
        end;
            
        if menu == 3 then
            colorsH = floor((colorsH - 29) / 30) * 30;
            Colors::UpdateRGB;
            hp::mouse::clear;
        end;
            
        if menu == 4 then
            colorsH = floor(colorsH / 30) * 30 + 30;
            Colors::UpdateRGB;
            hp::mouse::clear;
        end;
            
        if menu == 5 then
            colorsColorSpace = ColorSpace.HSV;
        end;
            
        if menu == 6 then
            colorsColorSpace = ColorSpace.HSL;
        end;
    end;
end;

AdjRGB: Colors::AdjRGB(d)
begin
    alias delta := d;
    case
        if colorsChannel == 1 then
            colorsR = colorsR + delta;
            colorsR = IP(MIN(MAX(colorsR, 0), 255));
        end;
        
        if colorsChannel == 2 then
            colorsG = colorsG + delta;
            colorsG = IP(MIN(MAX(colorsG, 0), 255));
        end;
        
        if colorsChannel == 3 then
            colorsB = colorsB + delta;
            colorsB = IP(MIN(MAX(colorsB, 0), 255));
        end;
    end;
    
    /// Update HSV values.
    local hsv;
    hsv = RGBtoHSV(colorsR, colorsG, colorsB);
    colorsH = hsv[1];
    colorsS = hsv[2];
    colorsV = hsv[3];
end;

AdjH: Colors::AdjHue(d: delta)
begin
    colorsH = colorsH + delta;
    colorsH = IP(MIN(MAX(colorsH, 0), 360));
    
    Colors::UpdateRGB;
end;

AdjS: Colors::AdjSaturation(d)
begin
    alias delta := d;
    colorsS = colorsS + delta;
    colorsS = IP(MIN(MAX(colorsS, 0), 100));
    
    Colors::UpdateRGB;
end;

AdjB: Colors::AdjBrightness(d)
begin
    alias delta := d;
    colorsV = colorsV + delta;
    colorsV = IP(MIN(MAX(colorsV, 0), 100));
    
    Colors::UpdateRGB;
end;

Loop: Colors::Loop()
begin
    local auto: focus = "";

    while 1 do
        Colors::Update();

        local auto: event = WAIT(-1);
        dict Event event;
        if hp::isKeyPressed(event) then
            focus = "";
            iferr
                if event.key == KeyCode.Esc then
                    return;
                end;
                
                if event.key == KeyCode.Enter then
                    return HSV(colorsH, colorsS, colorsV);
                end;
                
                if event.key == KeyCode.Minus then
                    if colorsChannel == 0 then
                        Colors::AdjHue(-1);
                    else
                        Colors::AdjRGB(-1);
                    end;
                end;
                
                if event.key == KeyCode.Plus then
                    if colorsChannel == 0 then
                        Colors::AdjHue(1);
                    else
                        Colors::AdjRGB(1);
                    end;
                end;
                
                if event.key == KeyCode.Up then
                    if colorsChannel == 0 then
                        Colors::AdjBrightness(1);
                    else
                        colorsChannel += (colorsChannel == 1 ? 2 : -1);
                    end;
                end;
                
                if event.key == KeyCode.Down then
                    if colorsChannel == 0 then
                        Colors::AdjBrightness(-1);
                    else
                        colorsChannel += (colorsChannel == 3 ? -2 : 1);
                    end;
                end;
                
                if event.key == KeyCode.Left && colorsChannel == 0 then
                    Colors::AdjSaturation(-1);
                end;
                
                if event.key == KeyCode.Right && colorsChannel == 0 then
                    Colors::AdjSaturation(1);
                end;
            then
            end;
            
        end;
        
        if hp::isMouseEvent(event) then
            X = event.x;
            Y = event.y;
            
            Colors::DoMenu();
            
            case
                if event.type == EventType.MouseDown then
                    if X>=5 && X<315 && Y>=148 && Y<188 then
                        colorsH := (X - 5) / 310 * 360;
                        Colors::UpdateRGB();
                        colorsChannel = 0;
                        focus = "Hue";
                    end;
                    
                    if X>=5 && X<143 && Y≥5 && Y<143 then
                        colorsS := IP((X - 5) / 137 * 100);
                        colorsV := IP((1 - (Y - 5) / 137) * 100);
                        Colors::UpdateRGB();
                        colorsChannel = 0;
                        focus = "Saturation & Brightness";
                    end;
                    
                    if X>=138 && X <=193 && Y>=51 && Y<=71 then
                        colorsChannel = 1;
                    end;
                    
                    if X>=138 && X <=193 && Y>=75 && Y<=95 then
                        colorsChannel = 2;
                    end;
                    
                    if X>=138 && X <=193 && Y>=99 && Y<=119 then
                        colorsChannel = 3;
                    end;
                end;
                
                if event.type == EventType.MouseMove then
                    if focus == "Hue" then
                        colorsH = (X - 5) / 310 * 360;
                        Colors::UpdateRGB();
                    end;
                    
                    if focus == "Saturation & Brightness" then
                        colorsS = IP((X - 5) / 137 * 100);
                        colorsV = IP((1 - (Y - 5) / 137) * 100);
                        Colors::UpdateRGB();
                    end;
                end;
                
                if event.type == EventType.MouseUp then
                    focus = "";
                end;
            end;
            
            colorsH = IP(MIN(MAX(colorsH, 0), 360));
            colorsS = IP(MIN(MAX(colorsS, 0), 100));
            colorsV = IP(MIN(MAX(colorsV, 0), 100));
        end;
    end;
end;

export Colors()
begin
    Colors::Setup;
    Colors::Loop;
end;
