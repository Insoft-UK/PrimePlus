#pragma mode( separator(.,;) integer(h64) )

// Implimenting the auto keyword, now removed from PPL+ as it can be reimplimened with regex.
//regex >`\bauto\b`i v__ADVANCE____COUNT__
//regex =`\bauto *(\: *[a-zA-Z]\w*(?:::[a-zA-Z]\w*)* *\()`i __ADVANCE__fn__COUNT__$1
//regex =`\bauto\b`i p__ADVANCE____COUNT__
//regex =`\bbegin\b` __STORE____RESET__BEGIN
//regex =`\bend;` __RESTORE__END;

// Variables, Arguments and Function Names Aliases
//regex `\b([a-zA-Z_]\w*) *\: *([a-zA-Z]\w*(?:::[a-zA-Z]\w*)*)` alias $2:=$1;$1

App::DisplayCopyright()
begin
  TEXTOUT_P("Copyright (c) 2023-2025 Insoft. All rights reserved.", 0, 0);
end;

#PYTHON
#END

EXPORT START()
BEGIN
  App::DisplayCopyright();
#PPL
  // In PPL+ `=` is treated as `:=` were in PPL `=` is treated as `==`
  // So only PPL code in this section.
  A := B;
#END
  WAIT;
  LOCAL a: alpha = 0;
  LOCAL b: _beta = 1;
  alpha = alpha + _beta;
  RETURN a;
END;

function()
BEGIN
#PPL
PYTHON("
from hpprime import *

trgtG := int(eval("+trgtG+")[1:])
dx := int(eval("+dx+"))
dy := int(eval("+dy+"))
img := eval("+img+")

w := int(img[1][0]); h := int(img[1][1]);bpp := int(img[1][2])
m := 1<<bpp - 1; s := 64 / bpp
x := 0; y := 0

size := len(img[0])
for i in range(size):
  d := int(img[0][i])
  for j in range(64 / bpp):
    c := img[2][d&m]
    pixon(trgtG, x + dx, y + dy, c)
    d := d>>bpp
    x := x + 1
    if x == w:
      x := 0
      y := y + 1
");
#END
END;

// Regular Expressions

// Example: Extending PPL with Switch-Case Functionality Using Regex
// This example demonstrates how to use regex (regular expressions) to add switch-case control flow to the PPL language, similar to the switch statements found in other programming languages.

regex >`\bswitch +([a-zA-Z_]\w*)` LOCAL sw__SCOPE__ := $1;\nCASE
regex >`\bcase +(\-?\d+) +do *$` IF sw\`__SCOPE__-1` == $1 THEN

function()
begin
    switch X
        case 0 do
        end;
    end;
end;

/// Code Stack

/// A code stack provides a convenient way to store code snippets that can be retrieved and used later.
/// Example: how code stack can be used when for a regular expresion to bring a bit of C style to PPL

regex >`\bfor *([^;]+); *([^;]+); *([^;]+) +do\b`i $1; WHILE $2 DO__PUSH__`\t$3;`
regex >`\bend;`i __POP__END;

function()
begin
    for i=0; i<2; i=i+1 do
        A := A+1;
    end;
end;

auto: too = 4;
export auto: My::Function::Name(d: delta, auto: myArg, auto: third)
begin
    local auto: aliasLongName, b: long::name, v, auto:long;
    alias aliasName = v;
    
    aliasLongName = long::name + v;
    v = aliasName + delta * long;
    myArg = 0;
end;

auto: maxy = 700;
My::Function::Name();

